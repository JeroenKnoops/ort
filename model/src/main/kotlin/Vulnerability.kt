/*
 * Copyright (C) 2020 Bosch.IO GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.ossreviewtoolkit.model

import com.fasterxml.jackson.annotation.JsonInclude

import java.net.URL

/**
 * Base model for all vulnerability providers supported by the advisor.
 */
data class Vulnerability(
    /**
     * The ID of a vulnerability. Most likely a CVE identifier.
     */
    val id: String,

    /**
     * Severity of the vulnerability. Most likely expressed using the CVSS in range 0.0 (none) to 10.0 (critical).
     * See: https://www.first.org/cvss/
     */
    val severity: Float,

    /**
     * URL pointing to a website with information regarding the vulnerability.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    val url: URL? = null
) {
    /**
     * See https://www.first.org/cvss/specification-document#Qualitative-Severity-Rating-Scale.
     */
    enum class Rating(val start: Float, val endExclusive: Float) {
        NONE(0.0f, 0.1f),
        LOW(0.1f, 4.0f),
        MEDIUM(4.0f, 7.0f),
        HIGH(7.0f, 9.0f),
        CRITICAL(9.0f, 10.0f);

        companion object {
            init {
                enumValues<Rating>().asIterable().zipWithNext { a, b ->
                    require(a.start < a.endExclusive) {
                        "The range [${a.start},${a.endExclusive}[ of $a must be non-empty."
                    }

                    require(a.endExclusive == b.start) {
                        "The range of $a needs to end (${a.endExclusive}) where the range of $b starts (${b.start})."
                    }
                }
            }

            /**
             * Get the [Rating] from a [score], or null if the [score] does not map to any [Rating].
             */
            fun fromCvssScore(score: Float): Rating? =
                enumValues<Rating>().singleOrNull { it.start <= score && score < it.endExclusive }
        }
    }

    val rating = Rating.fromCvssScore(severity)
}
